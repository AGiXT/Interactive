name: Run Tests
on:
  workflow_call:
    inputs:
      notebook:
        type: string
        required: true
        description: file to run (ending in .ipynb), can be directory to batch run (without trailing slash)
      features:
        type: string
        required: false
        description: 'Features to enable'
        default: ''
      front-end-image:
        type: string
        description: 'Front end image to run'
        default: 'ghcr.io/agixt/interactive:main'
        required: true
      front-end-port:
        type: string
        default: '3437'
      port-mapping:
        type: string
      additional-python-dependencies:
        type: string
        description: add whatever pip you need here
        default: 'pyotp requests qrcode==7.4.2 opencv-python-headless numpy pyzbar openai agixtsdk xts gtts tqdm soundfile playwright playwright_stealth && playwright install-deps && playwright install'
      report-name:
        type: string
        default: 'test-reports'
        description: 'Name of the report'
      wait-time:
        type: string
        description: 'Time to wait for services to be ready'
        default: '30'
    secrets:
      api-key:
        description: Optional api-key available as os.getenv('API_KEY') in your notebook
      GHCR_PAT:
        description: Optional GHCR_PAT available as os.getenv('GHCR_PAT') in your notebook
        required: true
      DISCORD_WEBHOOK:
        description: Optional discord webhook available as os.getenv('DISCORD_WEBHOOK') in your notebook
      EZLOCALAI_URI:
        description: Optional ezlocalai uri available as os.getenv('EZLOCALAI_URI') in your notebook
      EZLOCALAI_API_KEY:
        description: Optional ezlocalai api key available as os.getenv('EZLOCALAI_API_KEY') in your notebook
      DEEPSEEK_API_KEY:
        description: Optional deepseek api key available as os.getenv('DEEPSEEK_API_KEY') in your notebook

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      digest: ${{ steps.dockerBuild.outputs.digest }}
    services:
      front-end:
        image: ${{ inputs.front-end-image }}
        ports:
          - ${{ inputs.port-mapping || format('{0}:{1}', inputs.front-end-port, inputs.front-end-port) }}
        options: >-
          --health-cmd "curl -f http://localhost:${{ inputs.front-end-port }}"
          --health-interval 10s
          --health-timeout 15s
          --health-retries 10
          --health-start-period 5m
        env:
          mode: production
          NEXT_TELEMETRY_DISABLED: 1
          AGIXT_AGENT: XT
          AGIXT_FOOTER_MESSAGE: 'AGiXT 2025'
          APP_DESCRIPTION: 'XT is an advanced artificial intelligence agent orchestration agent.'
          APP_NAME: XT
          AGIXT_FILE_UPLOAD_ENABLED: true
          AGIXT_VOICE_INPUT_ENABLED: true
          AGIXT_RLHF: true
          AGIXT_ALLOW_MESSAGE_EDITING: true
          AGIXT_ALLOW_MESSAGE_DELETION: true
          AGIXT_SHOW_OVERRIDE_SWITCHES: tts,websearch,analyze-user-input
          INTERACTIVE_MODE: chat
          ALLOW_EMAIL_SIGN_IN: true
          APP_URI: http://localhost:${{ inputs.front-end-port }}
          AGIXT_SERVER: https://api.agixt.dev
          MICROSOFT_CLIENT_ID: "22dca179-bed1-4cad-8983-6add92b06acb"
          LOG_VERBOSITY_SERVER: 3
          TZ: America/New_York
    steps:
      - uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.10'
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: Install Python dependencies
        run: pip3 install jupyter nbconvert[webpdf] ${{ inputs.additional-python-dependencies }}

      - name: Update package lists and install jupyter output generation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --fix-missing -y pandoc texlive-xetex texlive-fonts-recommended texlive-plain-generic curl ffmpeg

      - name: Set notebook and artifact files
        run: |
          notebook="${{ inputs.notebook }}"
          if ${{ endsWith( inputs.notebook, 'ipynb' ) }} ; then
            echo "notebook-file=${notebook}" >> "$GITHUB_ENV"
            echo "artifact-file=${notebook%.*}.pdf"  >> "$GITHUB_ENV"
          else 
            echo "notebook-file=${notebook}/*.ipynb" >> "$GITHUB_ENV"
            echo "artifact-file=${notebook}/*.pdf"  >> "$GITHUB_ENV"
          fi

      - name: Check front-end logs
        run: docker logs ${{ job.services.front-end.id }} --follow &

      - name: Execute notebook
        id: execute_notebook
        env:
          API_KEY: ${{ secrets.api-key }}
          features: ${{ inputs.features }}
          EZLOCALAI_URI: ${{ secrets.EZLOCALAI_URI }}
          EZLOCALAI_API_KEY: ${{ secrets.EZLOCALAI_API_KEY }}
        run: |
          echo "Executing notebook with strict error checking..."

          # First try to execute and generate PDF
          python3 -m nbconvert --execute --log-level INFO --to pdf ${{ env.notebook-file }}
          STRICT_STATUS=$?
          echo "strict_status=${STRICT_STATUS}" >> $GITHUB_ENV
      - name: Rerun allowing errors if strict status is not 0
        if: env.strict_status != '0'
        run: |
          echo "Executing notebook with error tolerance..."
          python3 -m nbconvert --execute --allow-errors --log-level INFO --to pdf ${{ env.notebook-file }}
      - name: Send Videos to Discord
        if: always()
        run: |
          # Set message based on stored test outcome
          BRANCH_NAME=$(echo ${{ github.ref }} | awk -F'/' '{print $NF}')
          if [ "${{ github.actor }}" == "Josh-XT" ]; then
            DISCORD_NAME="<@381837595522367488>"
          elif [ "${{ github.actor }}" == "waiscodes" ]; then
            DISCORD_NAME="<@670762167037067304>"
          elif [ "${{ github.actor }}" == "birdup000" ]; then
            DISCORD_NAME="<@856308374567256074>"
          elif [ "${{ github.actor }}" == "Nick-XT" ]; then
            DISCORD_NAME="<@381908912951001088>"
          else
            DISCORD_NAME="**${{ github.actor }}**"
          fi
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          ESCAPED_MESSAGE="${COMMIT_MESSAGE//;/}"
          
          # Base message content
          if [ "${{ env.strict_status }}" != "0" ]; then
            BASE_MESSAGE="❌ **TEST FAILURE**: **${{ inputs.report-name }}** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit '$ESCAPED_MESSAGE' (${{ github.sha }}) by ${DISCORD_NAME}"
          else
            BASE_MESSAGE="✅ Test passed: **${{ inputs.report-name }}** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit '$ESCAPED_MESSAGE' (${{ github.sha }}) by **${{ github.actor }}**"
          fi
          
          # Dynamically find all .mp4 files in tests/ directory
          VIDEO_FILES=($(find tests/ -name "*.mp4" -type f -printf "%f\n" 2>/dev/null | sort))
          VIDEO_COUNT=${#VIDEO_FILES[@]}
          
          # Send videos if they exist
          if [ $VIDEO_COUNT -gt 0 ]; then
            echo "Found $VIDEO_COUNT video(s) to send: ${VIDEO_FILES[*]}"
            VIDEO_INDEX=1
            for video in "${VIDEO_FILES[@]}"; do
              # Extract demo name from filename (remove .mp4 and format nicely)
              DEMO_NAME=$(echo "$video" | sed 's/\.mp4$//' | sed 's/_/ /g' | sed 's/\b\w/\u&/g')
              MESSAGE="$BASE_MESSAGE - **$DEMO_NAME** ($VIDEO_INDEX/$VIDEO_COUNT)"
              echo "Sending Video $VIDEO_INDEX/$VIDEO_COUNT: tests/$video ($DEMO_NAME)"
              
              curl -H "Content-Type:multipart/form-data" \
                    -F "file=@tests/$video" \
                    -F "content=$MESSAGE" \
                    "${{ secrets.DISCORD_WEBHOOK }}"
              
              # Small delay between uploads to avoid rate limiting
              sleep 2
              ((VIDEO_INDEX++))
            done
          else
            # Fallback to legacy behavior - send PDF or original report.mp4
            FILE_TO_SEND="tests/report.mp4"
            if [ ! -f $FILE_TO_SEND ]; then
              FILE_TO_SEND="${{ env.artifact-file }}"
            fi
            echo "No individual videos found, sending fallback file: $FILE_TO_SEND"
            curl -H "Content-Type:multipart/form-data" \
                  -F "file=@$FILE_TO_SEND" \
                  -F "content=$BASE_MESSAGE" \
                  "${{ secrets.DISCORD_WEBHOOK }}"
          fi

      - uses: actions/upload-artifact@v4.4.3
        if: always()
        with:
          name: ${{ inputs.report-name }}
          path: |
            ${{ env.artifact-file }}
            tests/*.mp4

      - name: Exit with test status
        if: env.strict_status != '0'
        run: exit 1