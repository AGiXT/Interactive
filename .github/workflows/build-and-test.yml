name: Build and Test

on: ['push']
jobs:
  npm-build:
    runs-on: ubuntu-latest
    name: Build / NPM
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Install Packages and Build
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 20
      - run: npm install && npm run build
  build:
    uses: ./.github/workflows/docker.yml
    name: Build
    permissions:
      contents: read
      packages: write
    with:
      registry-dockerhub-enable: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      registry-repo-name: AGiXT-Interactive
      registry-readme: ./docs/README.md
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  test-ui:
    needs: build
    uses: ./.github/workflows/tests.yml
    name: Test UI
    permissions:
      contents: read
      packages: read
    with:
      notebook: tests/FrontEnd.ipynb
      front-end-image: ${{ needs.build.outputs.primary-image }}
      report-name: 'interactive-tests'
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      EZLOCALAI_URI: ${{ secrets.EZLOCALAI_URI }}
      EZLOCALAI_API_KEY: ${{ secrets.EZLOCALAI_API_KEY }}
  deploy:
    runs-on: ubuntu-22.04
    name: Deploy to dev server
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy Application
        id: deploy
        run: |
          RESPONSE=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}" -X POST "${{ secrets.DEPLOY_URI }}" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.DEPLOY_SECRET }}" \
            -d '{"domain": "${{ secrets.DEPLOY_DOMAIN }}"}')
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS_CODE:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS_CODE:/d')
          
          echo "deploy_response=$RESPONSE_BODY" >> $GITHUB_OUTPUT
          echo "deploy_status=$HTTP_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "Deployment successful with status $HTTP_STATUS"
          else
            echo "Deployment failed with status $HTTP_STATUS"
            exit 1
          fi
